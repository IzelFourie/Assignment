# Code Book
This document describes the code inside "assignment submission.R".

The code is splitted by headings in sections:
* Downloading data
* Reading data
* Editing data
* Analyzing data

## Libraries
As a first step libraries needed for data editing and analysis are loaded.

## Downloading data
Downloads the given url [link]("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip") 
to the given destination file: "mydataset.zip".
Unzip the mydataset zip file.
list.files() shows the file that was unzipped and downloaded to the working directory:
UCI HAR Dataset
calling list.files(UCI HAR Dataset) lists the files in the UCI HAR Dataset.
The README file in the UCI HAR Dataset states the files of interest for this exercise.

## Reading data
### Train and test data
Give the working directory from where to extract the data files.
Read the dataset files from UCI HAR by read.table of which the output are data.frames.
The data.frames are saved to objects:
train_set <- read.table("./train/X_train.txt")           # the training dataset
train_subject <- read.table("./train/subject_train.txt") # participants/subjects for each observation
train_labl <- read.table("./train/y_train.txt")          # labels for the different types of activities

The test dataset is read in as above:
the test data data.frame is read to test_set,
the subject data.frame to test_subject and
the activity labels data.frame to test_labl.

The train_set and test_set data.frames contain the different variables as columns. The variables are referred to as features.
A list and information on the different features is given in the UCI HAR Data file: features_info.txt 
The train_subject and test_subject data.frames show the subject for each observation in the train_set and test_set respectively.
The train_labl and test_labl data.frames give the type of activity for each observation as labels/IDs (later called activityID in the clean data.frame).
Thus they provide the activityID that corresponds to each observation in train_set and test_set.

### Features and activities
act_labl <- read.table("activity_labels.txt")
features <- read.table("features.txt")

activity_labels.txt and features.txt are read by read.table. The resulting data.frames saved to
act_labl: shows the activity for each activityID. Ex. activityID 1 corresponds to WALKING
features: the names of the variables (column names) in the train and test datasets

## Editing data
### Add column names to train and test data
The second column in features are given as column names to test_set and train_set.
The first and second columns in act_labl is given the names "activityId" and "activity" respectively

### Add activity ID column to training and test data set
train_labl and test_labl data.frames are given column names "activityID"
The columns from train_labl and test_labl are added to train_set and test_set data.frames respectively.
This is done by binding the columns of train_labl and train_set data.frames together. Same for test data.
Results in train_set1 and test_set1

### Add subject column to training and test data set
train_subject and test_subject are given column names "subject"
Bind train_subject and test_subject columns to train_set1 and test_set1.
Results in train_set2 and test_set2.

### Merge train and test data
train_set2 and test_set2 are merged by binding their rows together.
The new data.frame is called dataset.

### Keep only feature columns from the dataset that contain mean() or std()
The meanFreq variable is not included in my tidy dataset.
Select features (i.e. the variable names of "dataset") that contain mean and std with the grep function.
I excluded features that were not measured on an X, Y or Z axis. These features were excluded by running the
grep() function on "mean()-" and "std()-". Features not ending with X, Y, and Z do not contain a "-" after "mean()".
Features containing mean and std are stored in variables mean and std.
The subset of columns containing mean are stored in "columns_mean" and the columns containing std are stored in "columns_std".
Columns 1 (subject) and 2 (activityID) is subsetted and stored in "columns_subject_activityID".

"columns_mean", "columns_std" and "columns_subject_activityID" are bound together to form the new dataset: "dataset1"

### Separate the variable columns into "feature" (tBodyAcc etc.), "statistic" (mean or std) and "axis" (X, Y or Z). Use tidyr package.
This involves two steps:
1. Use gather() to stack columns of dataset1
Exclude the subject and activityID columns. Give the new stacked column the name of "feature_statistic_axis. Store in "res".

2. Call separate() on "res" to split the variable column into feature, statistic and axis columns.
The different classes/variables of this column are separated by "-". Define the separator as "-" in the call.
This creates three columns and they are given the names "feature", "statistic" and "axis".

Remove "()" from the contents of the "statistic" column with gsub.

## Add a column with activities (WALKING etc) that correspond to the activity ID.


```{r} 
activity <- tolower(act_labl$activity)
activity
activity[df$activityID]
df$activity <- activity[df$activityID]

#Check to see if activity values correspond to activityID
table(df$activity)
table(df$activityID)
# Change order of columns
df <- df[,c(1,2,7,3,4,5,6)]
head(df)
```

# Analysis
## Use dplyr to calculate averages
```{r}
tbldf <-tbl_df(df) # Convert df to a tibble data frame.
```

## Determine average of each subject for each activity, feature, statistic and axis
```{r}
group_subject <- group_by(tbldf, subject, activity, feature, statistic, axis)
new_data <- summarise(group_subject, mean=mean(value))

save(new_data, file = "new_data.rdata")
save(new_data, file = "new_data.csv")



At this point the final data frame meanAndStdAverages looks like this:
> head(meanAndStdAverages[, 1:5], n=3)
  Activity Subject tBodyAcc.mean...X tBodyAcc.mean...Y tBodyAcc.mean...Z
1  WALKING       1         0.2773308       -0.01738382        -0.1111481
2  WALKING       2         0.2764266       -0.01859492        -0.1055004
3  WALKING       3         0.2755675       -0.01717678        -0.1126749
Writing final data to CSV
Creates the output dir if it doesn't exist and writes meanAndStdAverages data frame to  the ouputfile.
